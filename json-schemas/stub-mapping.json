{
  "$schema" : "http://json-schema.org/draft-07/schema#",
  "type" : "object",
  "properties" : {
    "id" : {
      "type" : "string",
      "description" : "This stub mapping's unique identifier"
    },
    "uuid" : {
      "type" : "string",
      "description" : "Alias for the id"
    },
    "name" : {
      "type" : "string",
      "description" : "The stub mapping's name"
    },
    "request" : {
      "$ref" : "#/definitions/request-pattern"
    },
    "response" : {
      "$ref" : "#/definitions/response-definition"
    },
    "persistent" : {
      "type" : "boolean",
      "description" : "Indicates that the stub mapping should be persisted immediately on create/update/delete and survive resets to default."
    },
    "priority" : {
      "type" : "integer",
      "description" : "This stub mapping's priority relative to others. 1 is highest.",
      "minimum" : 1
    },
    "scenarioName" : {
      "type" : "string",
      "description" : "The name of the scenario that this stub mapping is part of"
    },
    "requiredScenarioState" : {
      "type" : "string",
      "description" : "The required state of the scenario in order for this stub to be matched."
    },
    "newScenarioState" : {
      "type" : "string",
      "description" : "The new state for the scenario to be updated to after this stub is served."
    },
    "postServeActions" : {
      "type" : "array",
      "description" : "DEPRECATED: Use `serveEventListeners` instead.\nA map of the names of post serve action extensions to trigger and their parameters.\n",
      "items" : {
        "type" : "object"
      }
    },
    "serveEventListeners" : {
      "type" : "array",
      "description" : "The list of serve event listeners",
      "items" : {
        "type" : "object",
        "properties" : {
          "name" : {
            "type" : "string"
          },
          "requestPhases" : {
            "type" : "array",
            "items" : {
              "type" : "string",
              "enum" : [ "BEFORE_MATCH", "AFTER_MATCH", "BEFORE_RESPONSE_SENT", "AFTER_COMPLETE" ]
            }
          },
          "parameters" : {
            "type" : "object"
          }
        }
      }
    },
    "metadata" : {
      "type" : "object",
      "description" : "Arbitrary metadata to be used for e.g. tagging, documentation. Can also be used to find and remove stubs."
    }
  },
  "additionalProperties" : false,
  "definitions" : {
    "equal-to-pattern" : {
      "title" : "String equals",
      "type" : "object",
      "required" : [ "equalTo" ],
      "properties" : {
        "equalTo" : {
          "type" : "string"
        },
        "caseInsensitive" : {
          "type" : "boolean"
        }
      }
    },
    "base64-string" : {
      "title" : "Base64 string",
      "type" : "string",
      "pattern" : "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
      "description" : "A base64 encoded string used to describe binary data."
    },
    "binary-equal-to-pattern" : {
      "title" : "Binary equals",
      "type" : "object",
      "required" : [ "binaryEqualTo" ],
      "properties" : {
        "binaryEqualTo" : {
          "$ref" : "#/definitions/base64-string"
        }
      }
    },
    "contains-pattern" : {
      "title" : "String contains",
      "type" : "object",
      "properties" : {
        "contains" : {
          "type" : "string"
        }
      },
      "required" : [ "contains" ]
    },
    "does-not-contain-pattern" : {
      "title" : "String does not contain",
      "type" : "object",
      "properties" : {
        "doesNotContain" : {
          "type" : "string"
        }
      },
      "required" : [ "doesNotContain" ]
    },
    "matches-pattern" : {
      "title" : "Regular expression match",
      "type" : "object",
      "properties" : {
        "matches" : {
          "type" : "string",
          "x-intellij-language-injection" : "RegExp"
        }
      },
      "required" : [ "matches" ]
    },
    "does-not-match-pattern" : {
      "title" : "Negative regular expression match",
      "type" : "object",
      "properties" : {
        "doesNotMatch" : {
          "type" : "string",
          "x-intellij-language-injection" : "RegExp"
        }
      },
      "required" : [ "doesNotMatch" ]
    },
    "not-pattern" : {
      "title" : "Logical NOT modifier",
      "type" : "object",
      "properties" : {
        "not" : {
          "$ref" : "#/definitions/content-pattern"
        }
      },
      "required" : [ "not" ]
    },
    "date-time-elements" : {
      "type" : "string",
      "example" : "now +3 days"
    },
    "before-pattern" : {
      "title" : "Before datetime",
      "type" : "object",
      "properties" : {
        "before" : {
          "$ref" : "#/definitions/date-time-elements"
        },
        "actualFormat" : {
          "$ref" : "#/definitions/date-time-elements"
        },
        "truncateExpected" : {
          "$ref" : "#/definitions/date-time-elements"
        },
        "truncateActual" : {
          "$ref" : "#/definitions/date-time-elements"
        }
      },
      "required" : [ "before" ]
    },
    "after-pattern" : {
      "title" : "After datetime",
      "type" : "object",
      "properties" : {
        "after" : {
          "$ref" : "#/definitions/date-time-elements"
        },
        "actualFormat" : {
          "$ref" : "#/definitions/date-time-elements"
        },
        "truncateExpected" : {
          "$ref" : "#/definitions/date-time-elements"
        },
        "truncateActual" : {
          "$ref" : "#/definitions/date-time-elements"
        }
      },
      "required" : [ "after" ]
    },
    "equal-to-date-time-pattern" : {
      "title" : "Before datetime",
      "type" : "object",
      "properties" : {
        "equalToDateTime" : {
          "$ref" : "#/definitions/date-time-elements"
        },
        "actualFormat" : {
          "$ref" : "#/definitions/date-time-elements"
        },
        "truncateExpected" : {
          "$ref" : "#/definitions/date-time-elements"
        },
        "truncateActual" : {
          "$ref" : "#/definitions/date-time-elements"
        }
      },
      "required" : [ "equalToDateTime" ]
    },
    "equal-to-json-pattern" : {
      "title" : "JSON equals",
      "type" : "object",
      "properties" : {
        "equalToJson" : {
          "oneOf" : [ {
            "type" : "object",
            "description" : "The JSON object to match.",
            "example" : {
              "message" : "hello"
            }
          }, {
            "type" : "string",
            "x-intellij-language-injection" : "JSON",
            "description" : "A JSON-encoded JSON string to match.",
            "example" : "{ \"message\": \"hello\" }"
          } ]
        },
        "ignoreExtraElements" : {
          "type" : "boolean"
        },
        "ignoreArrayOrder" : {
          "type" : "boolean"
        }
      },
      "required" : [ "equalToJson" ]
    },
    "matches-json-path-pattern" : {
      "title" : "JSONPath match",
      "type" : "object",
      "properties" : {
        "matchesJsonPath" : {
          "oneOf" : [ {
            "type" : "string",
            "example" : "$.name",
            "x-intellij-language-injection" : "JSONPath"
          }, {
            "type" : "object",
            "allOf" : [ {
              "properties" : {
                "expression" : {
                  "type" : "string",
                  "example" : "$.name"
                }
              }
            }, {
              "$ref" : "#/definitions/content-pattern"
            } ],
            "required" : [ "expression" ]
          } ]
        }
      },
      "required" : [ "matchesJsonPath" ]
    },
    "equal-to-xml-pattern" : {
      "title" : "XML equality",
      "type" : "object",
      "properties" : {
        "equalToXml" : {
          "type" : "string",
          "x-intellij-language-injection" : "XML",
          "example" : "<amount>123</amount>"
        },
        "enablePlaceholders" : {
          "type" : "boolean"
        },
        "placeholderOpeningDelimiterRegex" : {
          "type" : "string",
          "example" : "\\["
        },
        "placeholderClosingDelimiterRegex" : {
          "type" : "string",
          "example" : "]"
        },
        "namespaceAwareness" : {
          "type" : "string",
          "enum" : [ "LEGACY", "STRICT", "NONE" ]
        }
      },
      "required" : [ "equalToXml" ]
    },
    "matches-xpath-pattern" : {
      "title" : "XPath match",
      "type" : "object",
      "properties" : {
        "matchesXPath" : {
          "oneOf" : [ {
            "type" : "string",
            "example" : "//Order/Amount",
            "x-intellij-language-injection" : "XPath"
          }, {
            "type" : "object",
            "allOf" : [ {
              "properties" : {
                "expression" : {
                  "type" : "string",
                  "example" : "//Order/Amount"
                }
              }
            }, {
              "$ref" : "#/definitions/content-pattern"
            } ],
            "required" : [ "expression" ]
          } ]
        },
        "xPathNamespaces" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "string"
          }
        }
      },
      "required" : [ "matchesXPath" ]
    },
    "matches-json-schema-pattern" : {
      "title" : "JSON Schema match",
      "type" : "object",
      "properties" : {
        "matchesJsonSchema" : {
          "type" : "string",
          "x-intellij-language-injection" : "JSON",
          "description" : "A valid JSON schema as a string",
          "example" : "{\n  \"type\": \"object\",\n  \"required\": [\n    \"name\"\n  ],\n  \"properties\": {\n    \"name\": {\n      \"type\": \"string\"\n    },\n    \"tag\": {\n      \"type\": \"string\"\n    }\n  }\n}"
        },
        "schemaVersion" : {
          "description" : "The JSON schema version to interpret the schema against",
          "example" : "V202012",
          "enum" : [ "V4", "V6", "V7", "V201909", "V202012" ]
        }
      },
      "required" : [ "matchesJsonSchema" ]
    },
    "absent-pattern" : {
      "title" : "Absent matcher",
      "type" : "object",
      "properties" : {
        "absent" : {
          "type" : "boolean"
        }
      },
      "required" : [ "absent" ]
    },
    "and-pattern" : {
      "title" : "Logical AND matcher",
      "type" : "object",
      "properties" : {
        "and" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/content-pattern"
          }
        }
      },
      "required" : [ "and" ]
    },
    "or-pattern" : {
      "title" : "Logical AND matcher",
      "type" : "object",
      "properties" : {
        "or" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/content-pattern"
          }
        }
      },
      "required" : [ "or" ]
    },
    "has-exactly-multivalue-pattern" : {
      "title" : "Has exactly multi value matcher",
      "type" : "object",
      "properties" : {
        "hasExactly" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/content-pattern"
          }
        }
      },
      "required" : [ "hasExactly" ]
    },
    "includes-multivalue-pattern" : {
      "title" : "Has exactly multi value matcher",
      "type" : "object",
      "properties" : {
        "includes" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/content-pattern"
          }
        }
      },
      "required" : [ "includes" ]
    },
    "content-pattern" : {
      "type" : "object",
      "title" : "Content pattern",
      "oneOf" : [ {
        "$ref" : "#/definitions/equal-to-pattern"
      }, {
        "$ref" : "#/definitions/binary-equal-to-pattern"
      }, {
        "$ref" : "#/definitions/contains-pattern"
      }, {
        "$ref" : "#/definitions/does-not-contain-pattern"
      }, {
        "$ref" : "#/definitions/matches-pattern"
      }, {
        "$ref" : "#/definitions/does-not-match-pattern"
      }, {
        "$ref" : "#/definitions/not-pattern"
      }, {
        "$ref" : "#/definitions/before-pattern"
      }, {
        "$ref" : "#/definitions/after-pattern"
      }, {
        "$ref" : "#/definitions/equal-to-date-time-pattern"
      }, {
        "$ref" : "#/definitions/equal-to-json-pattern"
      }, {
        "$ref" : "#/definitions/matches-json-path-pattern"
      }, {
        "$ref" : "#/definitions/equal-to-xml-pattern"
      }, {
        "$ref" : "#/definitions/matches-xpath-pattern"
      }, {
        "$ref" : "#/definitions/matches-json-schema-pattern"
      }, {
        "$ref" : "#/definitions/absent-pattern"
      }, {
        "$ref" : "#/definitions/and-pattern"
      }, {
        "$ref" : "#/definitions/or-pattern"
      }, {
        "$ref" : "#/definitions/has-exactly-multivalue-pattern"
      }, {
        "$ref" : "#/definitions/includes-multivalue-pattern"
      } ]
    },
    "request-pattern" : {
      "$schema" : "http://json-schema.org/draft-07/schema#",
      "type" : "object",
      "example" : "{\n  \"urlPath\" : \"/charges\",\n  \"method\" : \"POST\",\n  \"headers\" : {\n    \"Content-Type\" : {\n      \"equalTo\" : \"application/json\"\n    }\n  }\n}",
      "properties" : {
        "scheme" : {
          "type" : "string",
          "enum" : [ "http", "https" ],
          "description" : "The scheme (protocol) part of the request URL"
        },
        "host" : {
          "type" : "string",
          "description" : "The hostname part of the request URL"
        },
        "port" : {
          "type" : "integer",
          "minimum" : 1,
          "maximum" : 65535,
          "description" : "The HTTP port number of the request URL"
        },
        "method" : {
          "type" : "string",
          "pattern" : "^[A-Z]+$",
          "description" : "The HTTP request method e.g. GET"
        },
        "url" : {
          "type" : "string",
          "description" : "The path and query to match exactly against. Only one of url, urlPattern, urlPath or urlPathPattern may be specified."
        },
        "urlPath" : {
          "type" : "string",
          "description" : "The path to match exactly against. Only one of url, urlPattern, urlPath or urlPathPattern may be specified."
        },
        "urlPathPattern" : {
          "type" : "string",
          "description" : "The path regex to match against. Only one of url, urlPattern, urlPath or urlPathPattern may be specified."
        },
        "urlPattern" : {
          "type" : "string",
          "description" : "The path and query regex to match against. Only one of url, urlPattern, urlPath or urlPathPattern may be specified."
        },
        "urlPathTemplate" : {
          "type" : "string",
          "description" : "The path template to match against. Must conform to the OpenAPI compatible subset of the RFC 6570 URI Template specification.\nOnly one of url, urlPattern, urlPath or urlPathPattern may be specified.\n"
        },
        "pathParameters" : {
          "type" : "object",
          "description" : "Path parameter patterns to match against in the <key>: { \"<predicate>\": \"<value>\" } form. Can only\nbe used when the urlPathPattern URL match type is in use and all keys must be present as variables\nin the path template.",
          "additionalProperties" : {
            "$ref" : "#/definitions/content-pattern"
          }
        },
        "queryParameters" : {
          "type" : "object",
          "description" : "Query parameter patterns to match against in the <key>: { \"<predicate>\": \"<value>\" } form",
          "additionalProperties" : {
            "$ref" : "#/definitions/content-pattern"
          }
        },
        "formParameters" : {
          "type" : "object",
          "description" : "application/x-www-form-urlencoded form parameter patterns to match against in the <key>: { \"<predicate>\": \"<value>\" } form",
          "additionalProperties" : {
            "$ref" : "#/definitions/content-pattern"
          }
        },
        "headers" : {
          "type" : "object",
          "description" : "Header patterns to match against in the <key>: { \"<predicate>\": \"<value>\" } form",
          "additionalProperties" : {
            "$ref" : "#/definitions/content-pattern"
          }
        },
        "clientIp" : {
          "type" : "string",
          "description" : "The client IP address to match against"
        },
        "basicAuthCredentials" : {
          "type" : "object",
          "description" : "Pre-emptive basic auth credentials to match against",
          "properties" : {
            "password" : {
              "type" : "string"
            },
            "username" : {
              "type" : "string"
            }
          },
          "required" : [ "username", "password" ]
        },
        "cookies" : {
          "type" : "object",
          "description" : "Cookie patterns to match against in the <key>: { \"<predicate>\": \"<value>\" } form",
          "additionalProperties" : {
            "$ref" : "#/definitions/content-pattern"
          }
        },
        "bodyPatterns" : {
          "type" : "array",
          "description" : "Request body patterns to match against in the { \"<predicate>\": \"<value>\" } form",
          "items" : {
            "$ref" : "#/definitions/content-pattern"
          }
        },
        "customMatcher" : {
          "type" : "object",
          "description" : "Custom request matcher to match against",
          "properties" : {
            "name" : {
              "type" : "string",
              "description" : "The matcher's name specified in the implementation of the matcher."
            },
            "parameters" : {
              "type" : "object"
            }
          }
        },
        "multipartPatterns" : {
          "type" : "array",
          "description" : "Multipart patterns to match against headers and body.",
          "items" : {
            "type" : "object",
            "properties" : {
              "name" : {
                "type" : "string"
              },
              "fileName" : {
                "type" : "string"
              },
              "matchingType" : {
                "type" : "string",
                "description" : "Determines whether all or any of the parts must match the criteria for an overall match.",
                "default" : "ANY",
                "enum" : [ "ALL", "ANY" ]
              },
              "headers" : {
                "type" : "object",
                "description" : "Header patterns to match against in the <key>: { \"<predicate>\": \"<value>\" } form",
                "additionalProperties" : {
                  "$ref" : "#/definitions/content-pattern"
                }
              },
              "bodyPatterns" : {
                "type" : "array",
                "description" : "Body patterns to match against in the { \"<predicate>\": \"<value>\" } form",
                "items" : {
                  "$ref" : "#/definitions/content-pattern"
                }
              }
            }
          }
        }
      }
    },
    "delay-distribution" : {
      "type" : "object",
      "description" : "The delay distribution. Valid property configuration is either median/sigma/type or lower/type/upper.",
      "oneOf" : [ {
        "title" : "Log normal",
        "description" : "Log normal randomly distributed response delay.",
        "type" : "object",
        "properties" : {
          "median" : {
            "type" : "integer"
          },
          "sigma" : {
            "type" : "number"
          },
          "maxValue" : {
            "type" : "number"
          },
          "type" : {
            "type" : "string",
            "enum" : [ "lognormal" ]
          }
        },
        "required" : [ "median", "sigma" ]
      }, {
        "title" : "Uniform",
        "description" : "Uniformly distributed random response delay.",
        "type" : "object",
        "properties" : {
          "lower" : {
            "type" : "integer"
          },
          "upper" : {
            "type" : "integer"
          },
          "type" : {
            "type" : "string",
            "enum" : [ "uniform" ]
          }
        },
        "required" : [ "lower", "upper" ]
      }, {
        "title" : "Fixed",
        "description" : "Fixed response delay.",
        "type" : "object",
        "properties" : {
          "milliseconds" : {
            "type" : "integer"
          },
          "type" : {
            "type" : "string",
            "enum" : [ "fixed" ]
          }
        },
        "required" : [ "milliseconds" ]
      } ]
    },
    "response-definition" : {
      "$schema" : "http://json-schema.org/draft-07/schema#",
      "allOf" : [ {
        "type" : "object",
        "properties" : {
          "status" : {
            "type" : "integer",
            "description" : "The HTTP status code to be returned"
          },
          "statusMessage" : {
            "type" : "string",
            "description" : "The HTTP status message to be returned"
          },
          "headers" : {
            "type" : "object",
            "description" : "Map of response headers to send",
            "additionalProperties" : {
              "type" : "string"
            }
          },
          "additionalProxyRequestHeaders" : {
            "type" : "object",
            "description" : "Extra request headers to send when proxying to another host.",
            "additionalProperties" : {
              "type" : "string"
            }
          },
          "removeProxyRequestHeaders" : {
            "type" : "array",
            "description" : "Request headers to remove when proxying to another host.",
            "items" : {
              "type" : "string"
            }
          },
          "body" : {
            "type" : "string",
            "description" : "The response body as a string. Only one of body, base64Body, jsonBody or bodyFileName may be specified."
          },
          "base64Body" : {
            "$ref" : "#/definitions/base64-string"
          },
          "jsonBody" : {
            "description" : "The response body as a JSON object. Only one of body, base64Body, jsonBody or bodyFileName may be specified.",
            "oneOf" : [ {
              "type" : "object"
            }, {
              "type" : "array"
            } ]
          },
          "bodyFileName" : {
            "type" : "string",
            "description" : "The path to the file containing the response body, relative to the configured file root. Only one of body, base64Body, jsonBody or bodyFileName may be specified.",
            "example" : "user-profile-responses/user1.json"
          },
          "fault" : {
            "type" : "string",
            "description" : "The fault to apply (instead of a full, valid response).",
            "enum" : [ "CONNECTION_RESET_BY_PEER", "EMPTY_RESPONSE", "MALFORMED_RESPONSE_CHUNK", "RANDOM_DATA_THEN_CLOSE" ]
          },
          "fixedDelayMilliseconds" : {
            "type" : "integer",
            "description" : "Number of milliseconds to delay be before sending the response."
          },
          "delayDistribution" : {
            "$ref" : "#/definitions/delay-distribution"
          },
          "chunkedDribbleDelay" : {
            "type" : "object",
            "description" : "The parameters for chunked dribble delay - chopping the response into pieces and sending them at delayed intervals",
            "properties" : {
              "numberOfChunks" : {
                "type" : "integer"
              },
              "totalDuration" : {
                "type" : "integer"
              }
            },
            "required" : [ "numberOfChunks", "totalDuration" ]
          },
          "fromConfiguredStub" : {
            "type" : "boolean",
            "description" : "Read-only flag indicating false if this was the default, unmatched response. Not present otherwise."
          },
          "proxyBaseUrl" : {
            "type" : "string",
            "description" : "The base URL of the target to proxy matching requests to."
          },
          "proxyUrlPrefixToRemove" : {
            "type" : "string",
            "description" : "A path segment to remove from the beginning in incoming request URL paths before proxying to the target."
          },
          "transformerParameters" : {
            "type" : "object",
            "description" : "Parameters to apply to response transformers."
          },
          "transformers" : {
            "type" : "array",
            "description" : "List of names of transformers to apply to this response.",
            "items" : {
              "type" : "string"
            }
          }
        }
      } ]
    }
  }
}